When I think about Google Sheets, I feel like we can split up a lot of its functionality into different features â€“ Math/Formulas, creating/updating Sheets, creating/updating charts & graphs, 
so in this sense I would split up these features into Microservices. When we are dealing with such a complex application, microservices give us better scalability and more flexibility.

Another impressive feature of Google Sheets is the real-time collaboration, which allows multiple users to interact with the same spreadsheets at the same time. I would say that this could be achieved via WebSockets. If we are talking in the .NET context we can also use SignalR, in this way we can achieve a persistent connection between the client (web browser) and the server, which would allow real time data updating. Of course, this feature would also include many other complex components:
 - A robust database storing all of the real-time changes made by the users so that they can reflect to everybody. 
   This can be solved with very well optimized read/write DB operations, proper indexing (if a relation DB is used)
 - A mechanism for resolving conflicts when users attempt to edit the same cell at the same time. This can be resolved with some cell locking mechanism.
 - The front-end would also be a very crucial module of the application, as it needs to provide a seamless user experience. 
   The UI is very complex and as it needs to be built into the browser, that means that it has do be visualized via HTML and CSS. 
   Combined with the real-time collaboration, then UI would need an extremely well optimized client-side rendering, so that there is no delay when different people work on the same document. 
   This can be resolved with proper compression and minification, compactly written HTML so that there no heavy UI components
